#!/usr/bin/env python3

# provides os.path.join
import os

# provides exit
import sys

# we make sure we can import runtest and runtest_config
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

# we import essential functions from the runtest library
from runtest import version_info, get_filter, cli, run

# this tells runtest how to run your code
from runtest_config import configure

# we stop the script if the major version is not compatible
assert version_info.major == 2

# construct filter(s)
f = [
# total energy
    get_filter(string='Total energy:',
               abs_tolerance=1.0e-10),
# non-idempotent SAD 
    get_filter(string='Energy of initial guess:',
               abs_tolerance=1.0e-10),
# idempotent SAD
    get_filter(from_string='Iteration       Energy (a.u.)      Max(grad.) ',
               num_lines=3,
               abs_tolerance=1.0e-10,
               mask=[2]) 
]

# invoke the command line interface parser which returns options
options = cli()

checkfiles = ["hf_energy.AO_density.plt", 
              "hf_energy.MO_0001.plt", 
              "hf_energy.MO_0002.plt", 
              "hf_energy.MO_0003.plt", 
              "hf_energy_mo_coefficients.out", 
              "hof_he.xyz"]

checkfiles = [os.path.join(os.path.dirname(__file__), i) for i in checkfiles]

ierr = 0
for inp in ['hf_energy.inp']:
    # the run function runs the code and filters the outputs
    ierr += run(options,
                configure,
                input_files=inp,
                extra_args='-xyz',
                filters={'out': f})

missing_files = [i for i in checkfiles if not os.path.exists(i)]
filerror = len(missing_files)

if filerror > 0:
    print("Missing files:")
    print("\n".join(missing_files))

sys.exit(ierr + filerror)
