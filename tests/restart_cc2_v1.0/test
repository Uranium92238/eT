#!/usr/bin/env python3

# provides os.path.join
import os

# provides exit
import sys

import shutil
import subprocess
from pathlib import Path

# we make sure we can import runtest and runtest_config
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

# we import essential functions from the runtest library
from runtest import version_info, get_filter, cli, run

# this tells runtest how to run your code
from runtest_config import configure

# functions to get the filters
from filters import get_es_filter 

# we stop the script if the major version is not compatible
assert version_info.major == 2

# construct filter(s)
n_states = 3
threshold = 1.0e-10
convergence = True
restart = True

f = get_es_filter(n_states, threshold, convergence, restart)

# invoke the command line interface parser which returns options
options = cli()

ierr = 0

# Copy old_restart_files to converted_files
src = os.path.join(os.path.dirname(__file__), "old_restart_files")
dest = os.path.join(os.path.dirname(__file__), "converted_files")

if os.path.exists(dest):
    shutil.rmtree(dest)
shutil.copytree(src, dest)

# Use the script on converted_files
script = Path.cwd().parent / "convert_v.1.0_restart_files.py" 
py_exe_ = sys.executable # use the correct python executable
call_script = f"{py_exe_} {script} {dest}"

p = subprocess.run(
    call_script,
    shell=True,
    stderr=subprocess.PIPE,
)

for inp in ['restart_cc2.inp']:
    #
    # the run function runs the code and filters the outputs
    #
    ierr += run(options,
                configure,
                input_files=inp,
                extra_args='-load ./converted_files',
                filters={'out': f})

shutil.rmtree(dest)

sys.exit(ierr)
